openapi: 3.0.0
info:
  title: AuthServ
  version: 0.0.1-SNAPSHOT
  description: |
    SSO service based on JWT
  license:
    name: MIT
servers:
  - url: http://localhost:8000
    description: Development server
paths:
  /auth/login:
    post:
      summary: Obtain a JWT token using basic credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BasicAuth"
            example:
              username: admin
              password: password
      responses:
        "200":
          $ref: "#/components/responses/Session"
        "401":
          $ref: "#/components/responses/Unauthorised"

  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Register"
            example:
              username: pepe
              password: password
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/Unauthorised"

  /auth/refresh:
    post:
      summary: Obtain a JWT token using a refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Refresh"
            example:
              username: pepe
              refresh_token: c5f53dcd-bb67-4b15-9a02-fe04c9b7f8da
      responses:
        "200":
          $ref: "#/components/responses/Session"
        "401":
          $ref: "#/components/responses/Unauthorised"

  /auth/check:
    get:
      summary: Check if the user is logged in
      security:
        - bearer: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Check"
              example:
                name: pepe
                authorities: [admin]
        "401":
          $ref: "#/components/responses/Unauthorised"

components:
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    Unauthorised:
      description: "Unauthorised: Access token is missing or invalid"
      content:
        application/json:
          schema:
            required:
              - timestamp
              - status
              - error
              - trace
              - message
              - path
            type: object
            properties:
              timestamp:
                type: string
              status:
                type: number
              error:
                type: string
              trace:
                type: string
              message:
                type: string
              path:
                type: string
    Session:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Session"
          example:
            "access_token": "eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJmb28iLCJzdWIiOiIyMjNiZmI2Ny0yZTIyLTRjZTMtYTAxMC1iZmVhZmRmZjE3MzkiLCJleHAiOjE2NTkyNzI0MDYsImlhdCI6MTY1OTI3MjM0Niwicm9sZXMiOlsiQURNSU4iXX0.QBFaSj8iOPc6OyZbL_waRA3WqOs9uydZbsset5qV9c_qZGggyjSr0u3QmIs0y0J9oJTAKnCZHwlf305xAWewvjd6xs8x1oPBj81cVfgyA-x_GtzNGUMv_2Q5r7_xFpH3_5eIDH_ID6V-WmG4g_BHUJgk6MTfC5u-7WI1rEaJ5n8jRv-oQA6tzW9wmUCq_95GHuKIrmtLdpiGr4L3xbyXUJTwGeAbSZsbe3FWeaD2Yvf0s7yrWLoLIiSiRBspfYstDLkA1I73HHh6urrv-oULUqmObv_lPjD386E_CQyKG8PEuOjHwd4_alEDq0ORJ2tpuQswd0rRoFJcYhgSCAbjTg"
            "token_type": "Bearer"
            "refresh_token": "0e536b45-c31b-41a6-b41e-4fe05597dd3e"
            "expires_in": 60
  schemas:
    BasicAuth:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    Register:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    Refresh:
      type: object
      required:
        - refresh_token
        - username
      properties:
        refresh_token:
          type: string
        username:
          type: string
    Session:
      type: object
      required:
        - access_token
        - refresh_token
        - expires_in
        - token_type
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        expires_in:
          type: number
        token_type:
          type: string
          enum: [ "Bearer" ]
    Check:
      type: object
      required:
        - name
        - authorities
      properties:
        name:
          type: string
        authorities:
          type: array
          items:
            type: string
