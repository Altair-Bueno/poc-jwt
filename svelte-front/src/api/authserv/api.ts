/* tslint:disable */
/* eslint-disable */
/**
 * AuthServ
 * SSO service based on JWT
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "./base";

/**
 *
 * @export
 * @interface AuthLoginPost401Response
 */
export interface AuthLoginPost401Response {
  /**
   *
   * @type {string}
   * @memberof AuthLoginPost401Response
   */
  timestamp: string;
  /**
   *
   * @type {number}
   * @memberof AuthLoginPost401Response
   */
  status: number;
  /**
   *
   * @type {string}
   * @memberof AuthLoginPost401Response
   */
  error: string;
  /**
   *
   * @type {string}
   * @memberof AuthLoginPost401Response
   */
  trace: string;
  /**
   *
   * @type {string}
   * @memberof AuthLoginPost401Response
   */
  message: string;
  /**
   *
   * @type {string}
   * @memberof AuthLoginPost401Response
   */
  path: string;
}
/**
 *
 * @export
 * @interface BasicAuth
 */
export interface BasicAuth {
  /**
   *
   * @type {string}
   * @memberof BasicAuth
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof BasicAuth
   */
  password: string;
}
/**
 *
 * @export
 * @interface Check
 */
export interface Check {
  /**
   *
   * @type {string}
   * @memberof Check
   */
  name: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Check
   */
  authorities: Array<string>;
}
/**
 *
 * @export
 * @interface Refresh
 */
export interface Refresh {
  /**
   *
   * @type {string}
   * @memberof Refresh
   */
  refresh_token: string;
  /**
   *
   * @type {string}
   * @memberof Refresh
   */
  username: string;
}
/**
 *
 * @export
 * @interface Register
 */
export interface Register {
  /**
   *
   * @type {string}
   * @memberof Register
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof Register
   */
  password: string;
}
/**
 *
 * @export
 * @interface Session
 */
export interface Session {
  /**
   *
   * @type {string}
   * @memberof Session
   */
  access_token: string;
  /**
   *
   * @type {string}
   * @memberof Session
   */
  refresh_token: string;
  /**
   *
   * @type {number}
   * @memberof Session
   */
  expires_in: number;
  /**
   *
   * @type {string}
   * @memberof Session
   */
  token_type: SessionTokenTypeEnum;
}

export const SessionTokenTypeEnum = {
  Bearer: "Bearer",
} as const;

export type SessionTokenTypeEnum =
  typeof SessionTokenTypeEnum[keyof typeof SessionTokenTypeEnum];

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Check if the user is logged in
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authCheckGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/auth/check`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Obtain a JWT token using basic credentials
     * @param {BasicAuth} basicAuth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLoginPost: async (
      basicAuth: BasicAuth,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'basicAuth' is not null or undefined
      assertParamExists("authLoginPost", "basicAuth", basicAuth);
      const localVarPath = `/auth/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        basicAuth,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Obtain a JWT token using a refresh token
     * @param {Refresh} refresh
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRefreshPost: async (
      refresh: Refresh,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'refresh' is not null or undefined
      assertParamExists("authRefreshPost", "refresh", refresh);
      const localVarPath = `/auth/refresh`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        refresh,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Register a new user
     * @param {Register} register
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRegisterPost: async (
      register: Register,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'register' is not null or undefined
      assertParamExists("authRegisterPost", "register", register);
      const localVarPath = `/auth/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        register,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Check if the user is logged in
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authCheckGet(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Check>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authCheckGet(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Obtain a JWT token using basic credentials
     * @param {BasicAuth} basicAuth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authLoginPost(
      basicAuth: BasicAuth,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPost(
        basicAuth,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Obtain a JWT token using a refresh token
     * @param {Refresh} refresh
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authRefreshPost(
      refresh: Refresh,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authRefreshPost(
        refresh,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Register a new user
     * @param {Register} register
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authRegisterPost(
      register: Register,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authRegisterPost(register, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @summary Check if the user is logged in
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authCheckGet(options?: any): AxiosPromise<Check> {
      return localVarFp
        .authCheckGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Obtain a JWT token using basic credentials
     * @param {BasicAuth} basicAuth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLoginPost(basicAuth: BasicAuth, options?: any): AxiosPromise<Session> {
      return localVarFp
        .authLoginPost(basicAuth, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Obtain a JWT token using a refresh token
     * @param {Refresh} refresh
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRefreshPost(refresh: Refresh, options?: any): AxiosPromise<Session> {
      return localVarFp
        .authRefreshPost(refresh, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Register a new user
     * @param {Register} register
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authRegisterPost(register: Register, options?: any): AxiosPromise<void> {
      return localVarFp
        .authRegisterPost(register, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary Check if the user is logged in
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public authCheckGet(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .authCheckGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Obtain a JWT token using basic credentials
   * @param {BasicAuth} basicAuth
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public authLoginPost(basicAuth: BasicAuth, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .authLoginPost(basicAuth, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Obtain a JWT token using a refresh token
   * @param {Refresh} refresh
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public authRefreshPost(refresh: Refresh, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .authRefreshPost(refresh, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Register a new user
   * @param {Register} register
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public authRegisterPost(register: Register, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .authRegisterPost(register, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
