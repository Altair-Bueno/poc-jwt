/* tslint:disable */
/* eslint-disable */
/**
 * AuthServ
 * SSO service based on JWT 
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import {Configuration} from './configuration';
import globalAxios, {
    AxiosInstance,
    AxiosPromise,
    AxiosRequestConfig
} from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString
} from './common';
// @ts-ignore
import {
    BASE_PATH,
    BaseAPI,
    COLLECTION_FORMATS,
    RequestArgs,
    RequiredError
} from './base';

/**
 * 
 * @export
 * @interface AuthLoginPost401Response
 */
export interface AuthLoginPost401Response {
    /**
     * 
     * @type {string}
     * @memberof AuthLoginPost401Response
     */
    'timestamp'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthLoginPost401Response
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthLoginPost401Response
     */
    'error'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthLoginPost401Response
     */
    'trace'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthLoginPost401Response
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthLoginPost401Response
     */
    'path'?: string;
}
/**
 * 
 * @export
 * @interface Basic
 */
export interface Basic {
    /**
     * 
     * @type {string}
     * @memberof Basic
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof Basic
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface Check
 */
export interface Check {
    /**
     * 
     * @type {string}
     * @memberof Check
     */
    'name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Check
     */
    'authorities'?: Array<string>;
}
/**
 * 
 * @export
 * @interface Refresh
 */
export interface Refresh {
    /**
     * 
     * @type {string}
     * @memberof Refresh
     */
    'refresh_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof Refresh
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface Register
 */
export interface Register {
    /**
     * 
     * @type {string}
     * @memberof Register
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof Register
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface Session
 */
export interface Session {
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    'access_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    'refresh_token'?: string;
    /**
     * 
     * @type {number}
     * @memberof Session
     */
    'expires_in'?: number;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    'token_type'?: SessionTokenTypeEnum;
}

export const SessionTokenTypeEnum = {
    Bearer: 'Bearer'
} as const;

export type SessionTokenTypeEnum = typeof SessionTokenTypeEnum[keyof typeof SessionTokenTypeEnum];


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check if the user is logged in
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCheckGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Obtain a JWT token using basic credentials
         * @param {Basic} basic 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost: async (basic: Basic, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'basic' is not null or undefined
            assertParamExists('authLoginPost', 'basic', basic)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(basic, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Obtain a JWT token using a refresh token
         * @param {Refresh} refresh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefreshPost: async (refresh: Refresh, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refresh' is not null or undefined
            assertParamExists('authRefreshPost', 'refresh', refresh)
            const localVarPath = `/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refresh, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register a new user
         * @param {Register} register 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterPost: async (register: Register, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'register' is not null or undefined
            assertParamExists('authRegisterPost', 'register', register)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(register, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Check if the user is logged in
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authCheckGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Check>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authCheckGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Obtain a JWT token using basic credentials
         * @param {Basic} basic 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginPost(basic: Basic, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPost(basic, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Obtain a JWT token using a refresh token
         * @param {Refresh} refresh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRefreshPost(refresh: Refresh, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRefreshPost(refresh, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register a new user
         * @param {Register} register 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRegisterPost(register: Register, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRegisterPost(register, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Check if the user is logged in
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCheckGet(options?: any): AxiosPromise<Check> {
            return localVarFp.authCheckGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Obtain a JWT token using basic credentials
         * @param {Basic} basic 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost(basic: Basic, options?: any): AxiosPromise<Session> {
            return localVarFp.authLoginPost(basic, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Obtain a JWT token using a refresh token
         * @param {Refresh} refresh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefreshPost(refresh: Refresh, options?: any): AxiosPromise<Session> {
            return localVarFp.authRefreshPost(refresh, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register a new user
         * @param {Register} register 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterPost(register: Register, options?: any): AxiosPromise<void> {
            return localVarFp.authRegisterPost(register, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Check if the user is logged in
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authCheckGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authCheckGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Obtain a JWT token using basic credentials
     * @param {Basic} basic 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authLoginPost(basic: Basic, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authLoginPost(basic, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Obtain a JWT token using a refresh token
     * @param {Refresh} refresh 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authRefreshPost(refresh: Refresh, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authRefreshPost(refresh, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register a new user
     * @param {Register} register 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authRegisterPost(register: Register, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authRegisterPost(register, options).then((request) => request(this.axios, this.basePath));
    }
}


